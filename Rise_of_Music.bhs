int scenario updateForPlayer(int playerNumber, ref int previousTotalUnitsKilled, ref int previousTotalUnitsLost, int unitDeltaThreshold, ref int timeSecOfLastbattle, int currentTimeSec, int timeSecAfterBattleUntilEconomicMood, ref string currentMusicMood);
int scenario writeMusicMoodToFile(string musicMood, int playerNumber);

scenario
{
    // =========================== Constants ===========================
    labels
    {
        UPDATE_TIME_SEC_DELTA = 12, // The number of seconds between each update
        TIME_SEC_AFTER_BATTLE_UNTIL_ECONOMIC_MOOD = 60, // The number of seconds to wait to see if fighting has stopped in order to switch to MUSIC_MOOD_ECONOMIC
        UNIT_DELTA_THRESHOLD = 2, // The number of units to lose or kill before the music will change
        MUSIC_MOOD_ECONOMIC = "economic", // The economic music mood
        MUSIC_MOOD_BATTLE_VICTORY = "battle_victory", // The battle_victory music mood
        MUSIC_MOOD_BATTLE_DEFEAT = "battle_defeat", // The battle_defeat music mood
        MUSIC_MOOD_WIN = "win", // The win music mood
        MUSIC_MOOD_LOSE = "lose", // The lose music mood
        MUSIC_MOOD_AGE_UP = "age_up", // The age up music mood (this keeps the current mood, but fades out the current song and starts another)
        MUSIC_MOOD_PAUSE = "pause", // The paused music mood (stops the current track)
        MUSIC_MOOD_UNPAUSE = "unpause" // The unpaused music mood (restarts the current track from the beginning)
    }

    // ========================= Initial values =========================
	
	    // Total number of units each player has killed
    	static int previousTotalUnitsKilled1 = 0;
    	static int previousTotalUnitsKilled2 = 0;
    	static int previousTotalUnitsKilled3 = 0;
    	static int previousTotalUnitsKilled4 = 0;
    	static int previousTotalUnitsKilled5 = 0;
    	static int previousTotalUnitsKilled6 = 0;
    	static int previousTotalUnitsKilled7 = 0;
    	static int previousTotalUnitsKilled8 = 0;
	
	    // Total number of units each player has lost
    	static int previousTotalUnitsLost1 = 0;
    	static int previousTotalUnitsLost2 = 0;
    	static int previousTotalUnitsLost3 = 0;
    	static int previousTotalUnitsLost4 = 0;
    	static int previousTotalUnitsLost5 = 0;
    	static int previousTotalUnitsLost6 = 0;
    	static int previousTotalUnitsLost7 = 0;
    	static int previousTotalUnitsLost8 = 0;
	
	    // Time of last battle for each player
    	static int timeSecOfLastbattle1 = 0;
    	static int timeSecOfLastbattle2 = 0;
    	static int timeSecOfLastbattle3 = 0;
    	static int timeSecOfLastbattle4 = 0;
    	static int timeSecOfLastbattle5 = 0;
    	static int timeSecOfLastbattle6 = 0;
    	static int timeSecOfLastbattle7 = 0;
    	static int timeSecOfLastbattle8 = 0;
    
    // Current music mood for each player
    static string currentMusicMood1 = "economic";
    static string currentMusicMood2 = "economic";
    static string currentMusicMood3 = "economic";
    static string currentMusicMood4 = "economic";
    static string currentMusicMood5 = "economic";
    static string currentMusicMood6 = "economic";
    static string currentMusicMood7 = "economic";
    static string currentMusicMood8 = "economic";
    
    // Whether or not the game is paused
    static int gamePaused = 0;
    
    // Last second that the update was performed
    static int lastUpdateSec = 0;

    // This functions runs only one time at the beginning of the game
    run_once
    {
        // Get the playerNumber from the XML file written by Rise_of_Music.exe
        open_file("Rise_of_Music/current_game/current_game.xml");
        string playerNumberString = file_read_text("PLAYER_NUMBER");
        string color = file_read_text("PLAYER_COLOR");
        string version = file_read_text("VERSION");
        close_file();
        
        print_game_msg("Rise of Music v. " + version);
        print_game_msg("Listening for music events from " + color + " player (ID=" + playerNumberString + ")");
    
        // Start the game with the ECONOMIC music mood
        writeMusicMoodToFile(MUSIC_MOOD_ECONOMIC, 1);
        writeMusicMoodToFile(MUSIC_MOOD_ECONOMIC, 2);
        writeMusicMoodToFile(MUSIC_MOOD_ECONOMIC, 3);
        writeMusicMoodToFile(MUSIC_MOOD_ECONOMIC, 4);
        writeMusicMoodToFile(MUSIC_MOOD_ECONOMIC, 5);
        writeMusicMoodToFile(MUSIC_MOOD_ECONOMIC, 6);
        writeMusicMoodToFile(MUSIC_MOOD_ECONOMIC, 7);
        writeMusicMoodToFile(MUSIC_MOOD_ECONOMIC, 8);
    }

    // ========================= Main script body =========================
    // Get the current time
    int currentTimeSec = time_sec();
    
    // This if statement will be true every UPDATE_TIME_SEC_DELTA seconds
    if (currentTimeSec != lastUpdateSec  && currentTimeSec % UPDATE_TIME_SEC_DELTA == 0)
    {
        // Update each player's statistics and potentially their music mood
        updateForPlayer(1, previousTotalUnitsKilled1, previousTotalUnitsLost1, UNIT_DELTA_THRESHOLD, timeSecOfLastbattle1, currentTimeSec, TIME_SEC_AFTER_BATTLE_UNTIL_ECONOMIC_MOOD, currentMusicMood1);
        updateForPlayer(2, previousTotalUnitsKilled2, previousTotalUnitsLost2, UNIT_DELTA_THRESHOLD, timeSecOfLastbattle2, currentTimeSec, TIME_SEC_AFTER_BATTLE_UNTIL_ECONOMIC_MOOD, currentMusicMood2);
        updateForPlayer(3, previousTotalUnitsKilled3, previousTotalUnitsLost3, UNIT_DELTA_THRESHOLD, timeSecOfLastbattle3, currentTimeSec, TIME_SEC_AFTER_BATTLE_UNTIL_ECONOMIC_MOOD, currentMusicMood3);
        updateForPlayer(4, previousTotalUnitsKilled4, previousTotalUnitsLost4, UNIT_DELTA_THRESHOLD, timeSecOfLastbattle4, currentTimeSec, TIME_SEC_AFTER_BATTLE_UNTIL_ECONOMIC_MOOD, currentMusicMood4);
        updateForPlayer(5, previousTotalUnitsKilled5, previousTotalUnitsLost5, UNIT_DELTA_THRESHOLD, timeSecOfLastbattle5, currentTimeSec, TIME_SEC_AFTER_BATTLE_UNTIL_ECONOMIC_MOOD, currentMusicMood5);
        updateForPlayer(6, previousTotalUnitsKilled6, previousTotalUnitsLost6, UNIT_DELTA_THRESHOLD, timeSecOfLastbattle6, currentTimeSec, TIME_SEC_AFTER_BATTLE_UNTIL_ECONOMIC_MOOD, currentMusicMood6);
        updateForPlayer(7, previousTotalUnitsKilled7, previousTotalUnitsLost7, UNIT_DELTA_THRESHOLD, timeSecOfLastbattle7, currentTimeSec, TIME_SEC_AFTER_BATTLE_UNTIL_ECONOMIC_MOOD, currentMusicMood7);
        updateForPlayer(8, previousTotalUnitsKilled8, previousTotalUnitsLost8, UNIT_DELTA_THRESHOLD, timeSecOfLastbattle8, currentTimeSec, TIME_SEC_AFTER_BATTLE_UNTIL_ECONOMIC_MOOD, currentMusicMood8);
        
        // Set the last time we updated
        lastUpdateSec = currentTimeSec;
        
        // DEBUG OUTPUT
        //print_game_msg("num_units_killed(7): " + previousTotalUnitsKilled7);
        //print_game_msg("num_units_lost(7): " + previousTotalUnitsLost7);
    }
    
    // If the game is paused, but it wasn't paused last update
    if (is_paused() && !gamePaused)
    {
        // Write this to file
        writeMusicMoodToFile(MUSIC_MOOD_PAUSE, 1);
        writeMusicMoodToFile(MUSIC_MOOD_PAUSE, 2);
        writeMusicMoodToFile(MUSIC_MOOD_PAUSE, 3);
        writeMusicMoodToFile(MUSIC_MOOD_PAUSE, 4);
        writeMusicMoodToFile(MUSIC_MOOD_PAUSE, 5);
        writeMusicMoodToFile(MUSIC_MOOD_PAUSE, 6);
        writeMusicMoodToFile(MUSIC_MOOD_PAUSE, 7);
        writeMusicMoodToFile(MUSIC_MOOD_PAUSE, 8);
            
        // The game is paused
        gamePaused = 1;
    }
    else if (!is_paused() && gamePaused) // Else, if the game is no longer paused, but it was on the last update
    {
        // Write this to file
        writeMusicMoodToFile(MUSIC_MOOD_UNPAUSE, 1);
        writeMusicMoodToFile(MUSIC_MOOD_UNPAUSE, 2);
        writeMusicMoodToFile(MUSIC_MOOD_UNPAUSE, 3);
        writeMusicMoodToFile(MUSIC_MOOD_UNPAUSE, 4);
        writeMusicMoodToFile(MUSIC_MOOD_UNPAUSE, 5);
        writeMusicMoodToFile(MUSIC_MOOD_UNPAUSE, 6);
        writeMusicMoodToFile(MUSIC_MOOD_UNPAUSE, 7);
        writeMusicMoodToFile(MUSIC_MOOD_UNPAUSE, 8);
        
        // The game is not paused
        gamePaused = 0;
    }
    
    // Triggers when player 1 ages up
    trigger(get_current_age(1) == 2)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 1);
    }
    trigger(get_current_age(1) == 3)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 1);
    }
    trigger(get_current_age(1) == 4)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 1);
    }
    trigger(get_current_age(1) == 5)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 1);
    }
    trigger(get_current_age(1) == 6)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 1);
    }
    trigger(get_current_age(1) == 7)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 1);
    }
    trigger(get_current_age(1) == 8)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 1);
    }
    
    // Triggers when player 2 ages up
    trigger(get_current_age(2) == 2)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 2);
    }
    trigger(get_current_age(2) == 3)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 2);
    }
    trigger(get_current_age(2) == 4)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 2);
    }
    trigger(get_current_age(2) == 5)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 2);
    }
    trigger(get_current_age(2) == 6)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 2);
    }
    trigger(get_current_age(2) == 7)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 2);
    }
    trigger(get_current_age(2) == 8)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 2);
    }
    
    // Triggers when player 3 ages up
    trigger(get_current_age(3) == 2)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 3);
    }
    trigger(get_current_age(3) == 3)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 3);
    }
    trigger(get_current_age(3) == 4)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 3);
    }
    trigger(get_current_age(3) == 5)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 3);
    }
    trigger(get_current_age(3) == 6)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 3);
    }
    trigger(get_current_age(3) == 7)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 3);
    }
    trigger(get_current_age(3) == 8)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 3);
    }
    
    // Triggers when player 4 ages up
    trigger(get_current_age(4) == 2)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 4);
    }
    trigger(get_current_age(4) == 3)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 4);
    }
    trigger(get_current_age(4) == 4)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 4);
    }
    trigger(get_current_age(4) == 5)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 4);
    }
    trigger(get_current_age(4) == 6)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 4);
    }
    trigger(get_current_age(4) == 7)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 4);
    }
    trigger(get_current_age(4) == 8)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 4);
    }
    
    // Triggers when player 5 ages up
    trigger(get_current_age(5) == 2)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 5);
    }
    trigger(get_current_age(5) == 3)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 5);
    }
    trigger(get_current_age(5) == 4)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 5);
    }
    trigger(get_current_age(5) == 5)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 5);
    }
    trigger(get_current_age(5) == 6)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 5);
    }
    trigger(get_current_age(5) == 7)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 5);
    }
    trigger(get_current_age(5) == 8)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 5);
    }
    
    // Triggers when player 6 ages up
    trigger(get_current_age(6) == 2)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 6);
    }
    trigger(get_current_age(6) == 3)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 6);
    }
    trigger(get_current_age(6) == 4)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 6);
    }
    trigger(get_current_age(6) == 5)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 6);
    }
    trigger(get_current_age(6) == 6)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 6);
    }
    trigger(get_current_age(6) == 7)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 6);
    }
    trigger(get_current_age(6) == 8)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 6);
    }
    
    // Triggers when player 7 ages up
    trigger(get_current_age(7) == 2)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 7);
    }
    trigger(get_current_age(7) == 3)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 7);
    }
    trigger(get_current_age(7) == 4)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 7);
    }
    trigger(get_current_age(7) == 5)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 7);
    }
    trigger(get_current_age(7) == 6)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 7);
    }
    trigger(get_current_age(7) == 7)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 7);
    }
    trigger(get_current_age(7) == 8)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 7);
    }
    
    // Triggers when player 8 ages up
    trigger(get_current_age(8) == 2)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 8);
    }
    trigger(get_current_age(8) == 3)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 8);
    }
    trigger(get_current_age(8) == 4)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 8);
    }
    trigger(get_current_age(8) == 5)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 8);
    }
    trigger(get_current_age(8) == 6)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 8);
    }
    trigger(get_current_age(8) == 7)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 8);
    }
    trigger(get_current_age(8) == 8)
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_AGE_UP, 8);
    }
	
	// Triggers when players lose
    trigger(is_defeated(1))
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_LOSE, 1);
    }
    trigger(is_defeated(2))
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_LOSE, 2);
    }
    trigger(is_defeated(3))
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_LOSE, 3);
    }
    trigger(is_defeated(4))
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_LOSE, 4);
    }
    trigger(is_defeated(5))
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_LOSE, 5);
    }
    trigger(is_defeated(6))
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_LOSE, 6);
    }
    trigger(is_defeated(7))
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_LOSE, 7);
    }
    trigger(is_defeated(8))
    {
        // Write music mood to a file
        writeMusicMoodToFile(MUSIC_MOOD_LOSE, 8);
    }
}

// Checks for music mood conditions for a specific player
int scenario updateForPlayer(int playerNumber, ref int previousTotalUnitsKilled, ref int previousTotalUnitsLost, int unitDeltaThreshold, ref int timeSecOfLastbattle, int currentTimeSec, int timeSecAfterBattleUntilEconomicMood, ref string currentMusicMood)
{
    // Get the new values
    int newTotalUnitsKilled = num_units_killed(playerNumber);
    int newTotalUnitsLost = num_units_lost(playerNumber);
	
    // Get the deltas between old and new values
    int totalUnitsKilledDelta = newTotalUnitsKilled - previousTotalUnitsKilled;
    int totalUnitsLostDelta = newTotalUnitsLost - previousTotalUnitsLost;
	
    // If the player's units killed delta plus units lost delta is greater than the threshold
    if ((totalUnitsKilledDelta + totalUnitsLostDelta) >= unitDeltaThreshold)
    {
        // If the player has killed more than they lost
        if (totalUnitsKilledDelta >= totalUnitsLostDelta)
        {
            // If the current music mood is not "battle_victory"
            if (currentMusicMood != "battle_victory")
            {
                // Set the current music mood
                currentMusicMood = "battle_victory";
        
                // Write the music mood to a file
                writeMusicMoodToFile("battle_victory", playerNumber);
            }
        }
        else // Else, the player lost more than they killed
        {
            // If the current music mood is not "battle_defeat"
            if (currentMusicMood != "battle_defeat")
            {
                // Set the current music mood
                currentMusicMood = "battle_defeat";
            
                // Write the music mood to a file
                writeMusicMoodToFile("battle_defeat", playerNumber);
            }
        }
        
        // Set now as the time since last battle
        timeSecOfLastbattle = currentTimeSec;
    }
    else // The player is not currently fighting
    {
        // If the current time is > than time since last battle + the wait period after a battle
        if (currentTimeSec > timeSecOfLastbattle + timeSecAfterBattleUntilEconomicMood)
        {
            // If the current music mood is not "economic"
            if (currentMusicMood != "economic")
            {
                // Set the current music mood
                currentMusicMood = "economic";
             
                // Write the music mood to a file
                writeMusicMoodToFile("economic", playerNumber);
            }
        }
    }
    
    // Update our values
    previousTotalUnitsKilled = newTotalUnitsKilled;
    previousTotalUnitsLost = newTotalUnitsLost;
	
	return 1;
}

// Writes music mood information to a file
int scenario writeMusicMoodToFile(string musicMood, int playerNumber)
{
    // DEBUG OUTPUT
    set_game_msg_color("red");
    print_game_msg("Player " + playerNumber + " - music_mood=" + musicMood);

    // Open the file
    open_file("Rise_of_Music\\current_game\\players\\" + playerNumber + "\\music_mood.xml");
    
    if (musicMood == "economic")
    {
        file_write_text("MUSIC_MOOD", "economic");
        
    }
    else if (musicMood == "battle_victory")
    {
        file_write_text("MUSIC_MOOD", "battle_victory");
    }
    else if (musicMood == "battle_defeat")
    {
        file_write_text("MUSIC_MOOD", "battle_defeat");
    }
    else if (musicMood == "win")
    {
        file_write_text("MUSIC_MOOD", "win");
    }
    else if (musicMood == "lose")
    {
        file_write_text("MUSIC_MOOD", "lose");
    }
    else if (musicMood == "age_up")
    {
        file_write_text("MUSIC_MOOD", "age_up");
    }
    else if (musicMood == "pause")
    {
        file_write_text("MUSIC_MOOD", "pause");
    }
    else if (musicMood == "unpause")
    {
        file_write_text("MUSIC_MOOD", "unpause");
    }
    
    // Close the file
    close_file();
    
    // Return success
    return 1;
}